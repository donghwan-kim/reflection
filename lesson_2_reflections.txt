1. What happens when you initialize a repository? Why do you need to do it?
명령어창에 초록색 #master?같은 문자가 생겼다. git repository라는걸 인지할 수 있었다.
git init을 통해 초기화시킴으로써 현재 폴더를 repository로 사용한다.

2. How is the staging area different from the working directory and the repository? What value do you think it offers?
staging area는 commit하기 전에 관련있는 여러 파일들을 하나의 commit으로 만들어 주기 위해서 사용한다. staging area에 파일을 추가하기 위해서는 git add 명령어를 사용하며 staging area를 초기화시키기 위해서는 git reset 명령어를 사용한다. 하나의 파일만 제외하려면 git reset [filename] 명령어를 사용한다.

3. How can you use the staging area to make sure you have one commit per logical change?
하나의 커밋이 논리적인 변화를 갖게 하기 위해서 staging area는 여러개의 파일을 함께 보관했다가 하나의 커밋으로 만들 수 있게 해준다.
HTML이나 CSS 파일은 서로 유기적인 관계를 맺고 있기때문에, 하나의 논리적인 모듈을 개발하기 위해 두 파일이 함께 수정된다. 이러한 유기적인 여러 파일들을 묶어서 하나의 커밋으로 만드는데 staging area가 도움을 준다.

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
다른 시도를 할때.. 다른 버전을 만들때 새로운 branch를 만들면 기존 진행을 유지한 채로 분리하여 작업 가능하다.

5. How do the diagrams help you visualize the branch structure?
어느 기점에서 어떤 branch로 분기했는지 알기 쉽다.

6. What is the result of merging two branches together? Why do represent it in the diagram the way we do?
실습 실패.. 하지만 궁금한건 각각 다른 함수(모듈)에 대해서 작업했을 때만 merge 시 에러가 나지 않는 것인지 궁금하다.
그냥 생각해보면 같은 함수를 여러 사람이 건드린다면 문제가 있을 것 같은데..